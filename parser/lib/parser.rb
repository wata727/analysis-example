#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class WhileParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 29)

attr_reader :input

def initialize(input)
  @input = StringScanner.new(input)
end

def self.parse(string)
  self.new(string).do_parse
end

def next_token
  case
  when input.eos?
    [false, false]
  when input.scan(/\s+/)
    next_token
  when input.scan(/\(/)
    [:LPAREN, nil]
  when input.scan(/\)/)
    [:RPAREN, nil]
  when input.scan(/\+/)
    [:PLUS, nil]
  when input.scan(/\*/)
    [:MUL, nil]
  when input.scan(/\-/)
    [:MINUS, nil]
  when input.scan(/=/)
    [:EQ, nil]
  when input.scan(/<=/)
    [:LEQ, nil]
  when input.scan(/\|/)
    [:OR, nil]
  when input.scan(/:=/)
    [:ASSIGN, nil]
  when input.scan(/;/)
    [:END, nil]
  when input.scan(/not\b/)
    [:NOT, nil]
  when input.scan(/true\b/)
    [:BOOL, true]
  when input.scan(/false\b/)
    [:BOOL, false]
  when input.scan(/skip\b/)
    [:SKIP, nil]
  when input.scan(/if\b/)
    [:IF, nil]
  when input.scan(/then\b/)
    [:THEN, nil]
  when input.scan(/else\b/)
    [:ELSE, nil]
  when input.scan(/while\b/)
    [:WHILE, nil]
  when input.scan(/do\b/)
    [:DO, nil]
  when input.scan(/\d+/)
    [:INT, input.matched.to_i]
  when input.scan(/[a-z]/)
    [:LIDENT, input.matched.to_sym]
  end
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     6,    20,    19,    44,     7,    45,     8,    39,    19,
     9,    47,    41,    10,    20,    11,     5,     6,    12,    13,
    10,     7,    11,     8,    39,    12,     9,    19,    41,    10,
    19,    11,    46,    39,    12,    20,    10,    41,    11,    39,
    39,    12,    21,    41,    41,    10,    20,    11,    31,    51,
    12,    10,    10,    11,    11,    19,    12,    12,     5,    25,
    14,    15,    16,    27,    43,     8,     5,    25,     9,    19,
    21,    27,    20,     8,     5,    25,     9,    20,   nil,    27,
   nil,     8,     5,    25,     9,   nil,   nil,    27,   nil,     8,
     5,    25,     9,     5,    25,    27,   nil,     8,    33,   nil,
     9,    14,    15,    16,    14,    15,    16,    17,    18,    14,
    15,    16,   nil,    43,   nil,    17,    18,    14,    15,    16,
     5,    25,   nil,    17,    18,    33,     5,    25,     5,    25,
   nil,    33,   nil,    33,     5,    25,     5,    25,   nil,    33,
   nil,    33,     5,    25,    14,    15,    16,    33,    14,    15,
    16,    14,    15,    16,    14,    15,    16,    14,    15,    16 ]

racc_action_check = [
     0,     0,    52,    30,    23,     0,    24,     0,    51,    23,
     0,    30,    51,     0,    24,     0,     7,     7,     0,     1,
    51,     7,    51,     7,    41,    51,     7,    29,    41,     7,
     3,     7,    29,    46,     7,     4,    41,    46,    41,    47,
    20,    41,     6,    47,    20,    46,    49,    46,    13,    49,
    46,    47,    20,    47,    20,    28,    47,    20,     9,     9,
    48,    48,    48,     9,    48,     9,    12,    12,     9,    38,
    39,    12,    40,    12,    19,    19,    12,    50,   nil,    19,
   nil,    19,    27,    27,    19,   nil,   nil,    27,   nil,    27,
    11,    11,    27,    15,    15,    11,   nil,    11,    15,   nil,
    11,     2,     2,     2,    34,    34,    34,     2,     2,    22,
    22,    22,   nil,    22,   nil,    22,    22,    26,    26,    26,
    16,    16,   nil,    26,    26,    16,    17,    17,    18,    18,
   nil,    17,   nil,    18,    21,    21,    33,    33,   nil,    21,
   nil,    33,    14,    14,    35,    35,    35,    14,    37,    37,
    37,    42,    42,    42,    36,    36,    36,    32,    32,    32 ]

racc_action_pointer = [
    -2,    19,    97,    17,    19,   nil,    28,    14,   nil,    56,
   nil,    88,    64,    48,   140,    91,   118,   124,   126,    72,
    37,   132,   105,    -4,    -2,   nil,   113,    80,    42,    14,
   -10,   nil,   153,   134,   100,   140,   150,   144,    56,    56,
    56,    21,   147,   nil,   nil,   nil,    30,    36,    56,    30,
    61,     5,   -14 ]

racc_action_default = [
   -22,   -22,    -1,    -2,    -3,    -4,    -5,   -22,   -10,   -22,
   -17,   -22,   -22,   -22,   -22,   -22,   -22,   -22,   -22,   -22,
   -22,   -22,   -22,   -22,   -22,    -5,   -22,   -22,   -13,   -22,
   -22,    53,    -6,   -22,    -7,    -8,   -11,   -12,   -14,   -22,
   -18,   -22,   -16,    -9,   -15,   -21,   -22,   -22,   -22,   -22,
   -20,   -22,   -19 ]

racc_goto_table = [
     4,     2,     3,     1,   nil,   nil,   nil,   nil,    22,   nil,
   nil,    28,   nil,    29,    30,    32,    34,    35,    36,    37,
    40,    38,    42,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,    50,   nil,   nil,
   nil,    52 ]

racc_goto_check = [
     4,     2,     3,     1,   nil,   nil,   nil,   nil,     2,   nil,
   nil,     3,   nil,     3,     3,     2,     2,     2,     2,     2,
     4,     3,     2,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,     4,   nil,   nil,
   nil,     4 ]

racc_goto_pointer = [
   nil,     3,     1,     2,     0 ]

racc_goto_default = [
   nil,   nil,    26,    23,    24 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 24, :_reduce_4,
  1, 24, :_reduce_5,
  3, 24, :_reduce_6,
  3, 24, :_reduce_7,
  3, 24, :_reduce_8,
  3, 24, :_reduce_9,
  1, 25, :_reduce_10,
  3, 25, :_reduce_11,
  3, 25, :_reduce_12,
  2, 25, :_reduce_13,
  3, 25, :_reduce_14,
  3, 25, :_reduce_15,
  3, 26, :_reduce_16,
  1, 26, :_reduce_17,
  3, 26, :_reduce_18,
  6, 26, :_reduce_19,
  4, 26, :_reduce_20,
  3, 26, :_reduce_21 ]

racc_reduce_n = 22

racc_shift_n = 53

racc_token_table = {
  false => 0,
  :error => 1,
  :INT => 2,
  :LIDENT => 3,
  :PLUS => 4,
  :MUL => 5,
  :MINUS => 6,
  :LPAREN => 7,
  :RPAREN => 8,
  :BOOL => 9,
  :EQ => 10,
  :LEQ => 11,
  :NOT => 12,
  :OR => 13,
  :ASSIGN => 14,
  :SKIP => 15,
  :END => 16,
  :IF => 17,
  :THEN => 18,
  :ELSE => 19,
  :WHILE => 20,
  :DO => 21 }

racc_nt_base = 22

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INT",
  "LIDENT",
  "PLUS",
  "MUL",
  "MINUS",
  "LPAREN",
  "RPAREN",
  "BOOL",
  "EQ",
  "LEQ",
  "NOT",
  "OR",
  "ASSIGN",
  "SKIP",
  "END",
  "IF",
  "THEN",
  "ELSE",
  "WHILE",
  "DO",
  "$start",
  "target",
  "aexp",
  "bexp",
  "stmt" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 6)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_5(val, _values, result)
     result = LIdentExpr.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_6(val, _values, result)
     result = PlusExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_7(val, _values, result)
     result = MulExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_8(val, _values, result)
     result = MinusExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_9(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_11(val, _values, result)
     result = EqualExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_12(val, _values, result)
     result = LessEqualExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_13(val, _values, result)
     result = NotExpr.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_14(val, _values, result)
     result = OrExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_15(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_16(val, _values, result)
     result = [AssignStmt.new(val[0], val[2])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_17(val, _values, result)
     result = [SkipStmt.new(true)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_18(val, _values, result)
     result = val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_19(val, _values, result)
     result = [IfStmt.new(val[1], val[3], val[5])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_20(val, _values, result)
     result = [WhileStmt.new(val[1], val[3])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_21(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class WhileParser
